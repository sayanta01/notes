control the process: kill, stop, resume
kill -l    - list all signals 

pstree -s "pid"    - see tree of pid
pstree             - print all the process running in the system not specific to user
pstree "uid"       - processes run by the user
pstree -p "uid"    -p gives process id also
2* "process"       - means same process 2 times


tty (teletypewriter)    - print name of the terminal you'r using 


ps -A or -e     - print all process running in the system
ps -t 1    -t means terminal and 1 means number 
ps -u "user"    - processes running by user
ps -C zsh       - give info regarding the process name
ps -C zsh -o user,pid,ppid,tty,time,cmd,stat    - show my choosen parameters of process


sleep 9999 &     - start bg process
jobs    - show jobs
fg %"job-num"    - grep job number enter, bring bg process to fg process 
bg %"job-num"    - send foreground process to background 


SIGTERM (15)    - terminate
kill -SIGTERM "pid"

SIGINT (interrupt) (2) works on Ctrl+C

SIGHUP (hang up) (1) child processes receives SIGHUP signal after closing terminal

SIGKILL (9)    - forcefully kill 
kill -SIGKILL "pid"

SIGQUIT (3) works on Ctrl+D

SIGTSTP (terminal stop) works on Ctrl+Z suspend the process
incase SIGTSTP didn't work you can use SIGSTOP

sleep 999 &    - for background process     
jobs           - see background process
ps -C sleep    - select by command name
kill -SIGTSTP "pid"

find / -name "file" 1> /dev/null 2> /dev/null    - for continue the process
kill -SIGCONT (18) "jobID" ex.. %1


nohup "command-name" "pid"    - (No Hang Up) run process even after closing terminal in which that command was ran "prevents the processes to receive SIGHUP signal" 

pkill -SIGTERM "pid"    - kill process based on process name
pkill -x kitty          - kill process by name      


